WHITESPACE = _{ " " | LINE_SEPARATOR }
line_comment = ${ "//" ~ (!LINE_SEPARATOR ~ ANY)* }
multiline_comment = @{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") }
COMMENT = @{ multiline_comment | line_comment }

whitespace_char = _{ "\n" | " " }
whitespace_opt = _{ whitespace_char* }

terminator = _{ whitespace_opt ~ ";" ~ whitespace_opt}

proto_definition = { SOI ~ whitespace_opt? ~ (version_decl)? ~ statement* ~ EOI }
version_decl = { "syntax" ~ "=" ~ string ~ terminator }


statement = { block_statement | import_statement }
block_statement = { message_definition | enum_definition }
import_statement = { "import" ~ string ~ terminator }


raw_string = @{ (!("\\" | "\"") ~ ANY)+ }
escape = { "\\" ~ "\""}
string = @{ "\"" ~ (raw_string | escape)* ~ "\"" }

bool = { "true" | "false" }

number = @{ '1'..'9' ~ ASCII_DIGIT* }
identifier_start = {ASCII_ALPHA | "_" }
identifier = @{ identifier_start ~ (identifier_start | ASCII_DIGIT)* }

block_begin = _{ "{" ~ whitespace_opt }
block_end = _{ "}" ~ whitespace_opt}

message_definition = {
    "message" ~ identifier ~ block_begin ~ message_field* ~ block_end
}
field_type = { "bool" | "uint64" | "int64" | "uint32" | "int32" | "string" | "bytes" | identifier }
message_field = { qualifier ~ field_type ~ identifier ~ "=" ~ number ~ terminator ~ options? }
qualifier = { "required" | "optional" | "repeated" }

max_size_option = { "max_size" }
max_len_option = { "max_len" }
nanopb_option = { "(" ~ "nanopb" ~ ")" ~ "." ~ (max_size_option | max_len_option) ~ "=" ~ number }
packed_option = { "packed" ~ "=" ~ bool }
option = { nanopb_option | packed_option }
options = { "[" ~ option ~ ("," ~ option)*  ~ "]" ~ whitespace_opt }

enum_definition = {
    "enum" ~ identifier ~ block_begin ~ enum_field* ~ block_end
}
enum_field = { whitespace_opt ~ identifier ~ "=" ~ number ~ terminator }

